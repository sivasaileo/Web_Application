name: Flask App CI/CD

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python and install dependencies (for Flask app)
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install flask
        pip install pytest  # Optional, for testing

    # Step 3: Run tests (optional, for Flask app)
    - name: Run tests
      run: |
        pytest || true

    # Step 4: Set up AWS credentials for Terraform
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # Step 5: Set up Terraform
    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: '1.1.0'  # Specify the Terraform version you need

    # Step 6: Terraform Init (initialize the configuration)
    - name: Terraform Init
      run: terraform init
      working-directory: terraform  # Ensure you're in the correct directory

    # Step 7: Terraform Plan (optional: see the changes Terraform will make)
    - name: Terraform Plan
      run: terraform plan
      working-directory: terraform  # Ensure you're in the correct directory

    # Step 8: Terraform Apply (apply the infrastructure changes)
    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform  # Ensure you're in the correct directory

    # Step 9: Verify deployment (optional - check if your EC2 is up and Flask app is running)
    - name: Verify Deployment
      run: |
        curl -I http://18.208.169.195:5000   # Replace with your EC2 instance's public IP
